You can refer to the same problem 739. Daily Temperatures.

Push every pair of <price, result> to a stack.
Pop lower price from the stack and accumulate the count.

One price will be pushed once and popped once.
So 2 * N times stack operations and N times calls.
I'll say time complexity is amortized O(1)
space complexity --> O(n)
----------------------------------------------------------
----------------------------------------------------------
Code:
-----
class StockSpanner 
{
public:
    stack<pair<int, int>>st; // create a pair of element and number of poping element less that this element.
    StockSpanner() 
    {}
    // 100,80,60,70,60,75,85 // using NGL approach
    int next(int price)
    {
      int c = 1;
      while(!st.empty() && st.top().first <= price)
      {
          c = c + st.top().second;
          st.pop();
      }
      st.push({price,c});
      return c;
    }
};
