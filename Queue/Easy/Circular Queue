T.C --> O(1)
S.C --> O(N)
-------------
Code:\
------
class CircularQueue{
    public:
    int *arr;
    int front;
    int rear;
    int size;
    CircularQueue(int n)
    {
       size = n;
       arr = new int[n];
       front = -1;
       rear = -1;
    }
    // Enqueues 'X' into the queue. Returns true if it gets pushed into the stack, and false otherwise.
    bool enqueue(int value)
    {
        if((front == 0 && rear == size-1) || (rear == front -1)) return false;
        if(front == -1) 
        {
            front = rear = 0;
        }
        else if(rear == size-1 && front != 0)
        {
            rear = 0; // to maintain the circular loop
        }
        else 
        {
            rear++;//normal flow  
        }
        arr[rear] = value;
        return true;
    }
    // Dequeues top element from queue. Returns -1 if the stack is empty, otherwise returns the popped element.
    int dequeue()
    {
        // Write your code here.
        if(front == -1) return -1;
        int ans = arr[front];
        if(front == size -1)
        {
            front = 0; // to maintain the loop
        }
        else if(front == rear)
        {
            front = rear = -1; //only single element present
        }
        else 
        {
            front++;
        }
        return ans;
    }
};
