T.C --> O(N)
S.C-->O(N-K) Not the optimal approach have to solve in optimal approach
------------
Code:
-----

vector<long long> printFirstNegativeInteger(long long int A[], long long int N, long long int K)
{
    deque<long long> dq;
    vector<long long> ans;
    
    //for 1st k elements 
    for(int i = 0; i < K; i++)
    {
      if(A[i] < 0)  
      {
          dq.push_back(i);
      }
    }
    //1st negative for 1st window
    if(!dq.empty()) ans.push_back(A[dq.front()]);
    else ans.push_back(0);
    
    //for the rest elemnts 
    for(int i = K ; i < N; i++)
    {
        // determine whether the 1st negative element of previous window has present in current window or not 
        if(dq.size() && i - dq.front() >= K)
        {
          dq.pop_front();
        }
        //addition of the index of current element if it is negative
        if(A[i] < 0)
        {
            dq.push_back(i);
        }
        if(!dq.empty()) ans.push_back(A[dq.front()]);
        else ans.push_back(0);
    }
    return ans;
}
