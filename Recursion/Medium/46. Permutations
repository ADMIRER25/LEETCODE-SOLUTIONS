T.C --> O(N! *N)
S.C--> O(N) + O(N) 1st one is space of ds and the second one is for array used
-------------------------------------------------------------------------------
Code:
-----

class Solution {
public:
  void helper(vector<vector<int>> &ans,vector<int>&ds,vector<int>&nums,int freq[])
  {
    if(ds.size() == nums.size())
    {
      ans.push_back(ds);
      return;
    }
    
    for(int i = 0; i < nums.size(); i++)
    {
      if(!freq[i])
      {
        ds.push_back(nums[i]);
        freq[i] = 1;
        helper(ans,ds,nums,freq);
        freq[i] = 0;
        ds.pop_back();
      }
    }
  }
    vector<vector<int>> permute(vector<int>& nums) 
    {
       vector<vector<int>> ans;
       vector<int>ds;
       int size = nums.size();
       int freq[size];
       for(int i = 0; i < size; i++) freq[i] = 0;
       helper(ans,ds,nums,freq);
       return ans;
    }
};
----------------------------------------------------------------
T.C --> O(N! *N)
S.C--> O(N) this is the depth of recursion tree(auxiliary space)
-----------------------------------------------------------------
Code:\
-------
class Solution {
public:
  void helper(vector<vector<int>> &ans,vector<int>&nums,int index)
  {
    if(index == nums.size())
    {
      ans.push_back(nums);
      return;
    }
    
    for(int i = index; i < nums.size(); i++)
    {
      swap(nums[index],nums[i]);
      helper(ans,nums,index+1);
      swap(nums[index],nums[i]);
    }
  }
    vector<vector<int>> permute(vector<int>& nums) 
    {
       vector<vector<int>> ans;
       helper(ans,nums,0);
       return ans;
    }
};
