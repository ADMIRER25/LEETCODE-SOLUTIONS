T.C-->AMORTISED O(1)
S.C-->O(H)
----------------------

#include<bits/stdc++.h>
class BSTIterator {
  stack<TreeNode*>st;
  void store_left(TreeNode* root)
  {
    TreeNode* node = root;
      while(node)
      {
        st.push(node);
        node = node ->left;
      }
  }
public:
  
    BSTIterator(TreeNode* root) 
    {
      store_left(root);
    }
    
    int next()
    {
      int ele = st.top() ->val;
      TreeNode *node = st.top();
      st.pop();
      store_left(node ->right);
      return ele;
    }
    
    bool hasNext() 
    {
      return !st.empty();
    }
};

/**
 * Your BSTIterator object will be instantiated and called as such:
 * BSTIterator* obj = new BSTIterator(root);
 * int param_1 = obj->next();
 * bool param_2 = obj->hasNext();
 */
