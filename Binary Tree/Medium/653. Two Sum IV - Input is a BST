T.C --> O(N)
S.C-->O(N)
-------------
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool findTarget(TreeNode* root, int k)
    {
      vector<int>inorder;
      TreeNode *curr = root;
      while(curr)
      {
        //place the link 
        TreeNode* prev;
        if(curr->left) 
        {
          prev = curr ->left;
          while(prev ->right != curr && prev ->right)
          {
            prev = prev ->right;
          }
          if(prev->right == curr)
          {
            inorder.push_back(curr -> val);
            prev -> right = NULL;
            curr = curr -> right;
          }
          else 
          {
            prev ->right = curr;
            curr = curr -> left;
          }
        }
        else
        {
          inorder.push_back(curr->val);
          curr = curr -> right;
        }
      }
     int left = 0,right = inorder.size()-1;
     while(left < right)
     {
       if(k < inorder[left] + inorder[right]) right--;
       else if (k > inorder[left] + inorder[right]) left++;
       else return true;
     }
      return false;
    }
};
----------------------------------------------------------------------------------
T.C--> O(N)
S.C-->O(H)*2
----------

class BSTIterator{
   stack<TreeNode*>st;
   //check -> true -> next
  //check -> false -> before
  bool check = true;
  
  public:
  BSTIterator(TreeNode *root,bool ischeck)
  {
    check = ischeck;
    pushAll(root);
  }
  void pushAll(TreeNode *root)
  {
    while(root)
    {
      st.push(root);
      if(check) root = root -> left;
      else root = root -> right;
    }
  }
 /* int next() //to do next and before in one function
  {
    TreeNode *node = st.top();
    st.pop();
    if(check) pushAll(node ->right);
    else pushAll(node ->left);
    return node ->val;
  }*/
   int next()
  {
    TreeNode *node = st.top();
    st.pop();
    pushAll(node ->right);
    return node ->val;
  }
  int before()
  {
    TreeNode *node = st.top();
    st.pop();
    pushAll(node ->left);
    return node ->val;
  }
};
class Solution {
public:
    bool findTarget(TreeNode* root, int k)
    {
      if(!root) return false;
      
      BSTIterator l(root,true); // create decreasing order stack
      BSTIterator r(root,false);// create increasing order stack
      
      int i = l.next();
      int j = r.before();
      
      while(i < j)
      {
        if(i+j == k) return true;
        else if(i+j < k) i = l.next();
        else j = r.before();
      }
       return false;
    }
};
