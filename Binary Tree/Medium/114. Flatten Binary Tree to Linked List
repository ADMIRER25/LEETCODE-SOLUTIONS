Using reccursion:
-----------------
T.C->O(N)
S.C-->O(N)
-----------
class Solution 
{
public:
    TreeNode *prev = NULL;
    void flatten(TreeNode* root) 
    {
      if(!root) return;
      
      flatten(root->right);
      flatten(root->left);
      
      root -> right = prev;
      root -> left = NULL;
      prev = root;
    }
};
using iterative method:
----------------------
 */
class Solution {
public:
    void flatten(TreeNode* root) 
    {
       if(!root) return;
      
       stack<TreeNode*>st;
       st.push(root);
      while(st.size())
      {
        TreeNode* node = st.top();
        st.pop();
        if(node->right) st.push(node->right);
        if(node ->left) st.push(node ->left);
        if(st.size()) node -> right = st.top();
        node ->left = NULL;
      }
    }
};
using morris traversal:
-----------------------
T.C-->O(N)
S.C-->O(1)
----------
class Solution {
public:
    void flatten(TreeNode* root) 
    {
      TreeNode* curr = root;
      while(curr)
      {
        TreeNode* prev;
        if(curr ->left) 
        {
         prev = curr -> left;
         while(prev ->right)
          {
            prev = prev ->right;
          }
          prev->right = curr -> right;
          curr ->right = curr->left;
          curr ->left = NULL;
        }
        curr = curr ->right;
      } 
    }
