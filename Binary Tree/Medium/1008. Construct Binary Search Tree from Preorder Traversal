T.C-->O(n^2)
S.C-->O(1)
------------
class Solution {
public:
    TreeNode* bstFromPreorder(vector<int>& preorder)
    {
      int size = preorder.size();
      
      TreeNode* node = new TreeNode(preorder[0]);
      
      TreeNode* root = node;
      for(int i = 1; i < size; i++)
      {
        TreeNode *prev = NULL;
        int temp = preorder[i];
        node = root;
        while(node)
        {
          if(node -> val > temp)
          {
            prev = node;
            node = node->left;
          }
         else if(node ->val < temp)
          {
            prev = node;
            node = node-> right;
          }
        }
       if(prev->val > temp) prev->left = new TreeNode(temp);
       else prev->right = new TreeNode(temp);
      }
      return root;
    }
};
T.C-->O(N) + O(nLogN)
S.C-->O(N)
----------------------
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
   TreeNode* buildTreehelper(vector<int>&preorder,vector<int>&inorder,int prestart,int preend,int instart,int inend, unordered_map<int,int>&mp)
   {
     if(prestart > preend) return NULL;
     TreeNode * root = new TreeNode(preorder[prestart]);
     
     int inroot= mp[root->val];
     int numsleft = inroot - instart;
     
     root ->left =  buildTreehelper(preorder,inorder,prestart+1,prestart+numsleft,instart,inroot-1,mp);
     root -> right = buildTreehelper(preorder,inorder,prestart+numsleft+1,preend,inroot+1,inend,mp);
     
     return root;
   }
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder)
    {
      unordered_map<int,int>mp;
      for(int i = 0; i < inorder.size(); i++) mp[inorder[i]] = i;
     
      return buildTreehelper(preorder,inorder,0,preorder.size()-1,0,inorder.size()-1,mp);
    }
  
    TreeNode* bstFromPreorder(vector<int>& preorder)
    {
       vector<int>inorder;
       for(int val : preorder) inorder.push_back(val);
       sort(inorder.begin(),inorder.end());
      //construct the bt with the help of inorder and preorder.
      
       return buildTree(preorder,inorder);
    }
};
-----------------------------------------------------------------------------------------------------------

T.C-->O(N)
S.C-->O(1) // ignoring the recursion stack space
-------------------------------------------------
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
TreeNode* helper(vector<int>&preorder,int &idx,int &size,int upper_bound)
{
    if(idx >= size || preorder[idx] > upper_bound) return NULL;
     TreeNode* root = new TreeNode(preorder[idx++]);
    // idx += 1;
     root -> left = helper(preorder,idx,size,root->val);
     root-> right =  helper(preorder,idx,size,upper_bound);
  
  return root;
}
    TreeNode* bstFromPreorder(vector<int>& preorder)
    {
      int upper_bound = INT_MAX;
      int size = preorder.size();
      int idx = 0;
      
      return helper(preorder,idx,size,upper_bound);
    }
};
