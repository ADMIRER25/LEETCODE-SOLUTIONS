T.C-->O(N)
S.C-->O(1) //ignoring auxiliary stack space
-------------------------------------------
class Info
{
    public:
       int size;
       int mini;
       int maxi;
       bool isBST;
};


class Solution{
    Info largerstBSThelper(Node *root)
    {
        if(!root) return {0,INT_MAX,INT_MIN,true};
        
        Info left = largerstBSThelper(root->left);
        Info right = largerstBSThelper(root->right);
        
        if(left.maxi < root-> data && root -> data < right.mini && left.isBST && right.isBST)
        {
            return {left.size + right.size+1,min(root->data,left.mini),max(root-> data,right.maxi),true};
        }
        return {max(left.size,right.size),INT_MIN,INT_MAX,false};
    }
    public:
    /*You are required to complete this method */
    // Return the size of the largest sub-tree which is also a BST
    int largestBst(Node *root)
    {
       int maxsize = 0;
       Info obj  = largerstBSThelper(root);
       return obj.size;
    }
};
-------------------------------------------------------------------------------------------------------------------
class Info
{
    public:
       int size;
       int mini;
       int maxi;
};


class Solution{
    Info largerstBSThelper(Node *root)
    {
        if(!root) return {0,INT_MAX,INT_MIN};
        
        Info left = largerstBSThelper(root->left);
        Info right = largerstBSThelper(root->right);
        
        if(left.maxi < root-> data && root -> data < right.mini)
        {
            return {left.size + right.size+1,min(root->data,left.mini),max(root-> data,right.maxi)};
        }
        return {max(left.size,right.size),INT_MIN,INT_MAX};
    }
    public:
    /*You are required to complete this method */
    // Return the size of the largest sub-tree which is also a BST
    int largestBst(Node *root)
    {
       int maxsize = 0;
       Info obj  = largerstBSThelper(root);
       return obj.size;
    }
};
