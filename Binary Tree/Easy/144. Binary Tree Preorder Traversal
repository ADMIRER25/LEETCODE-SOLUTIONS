using recursion
T.c--> O(N)
S.c --> O(N)
--------------
Code:
-----

class Solution {
public:
  void helper(TreeNode* root,vector<int>&ans)
  {
        if(root == NULL) return;
        ans.push_back(root -> val);
        helper(root->left,ans);
        helper(root->right,ans);
  }
    vector<int> preorderTraversal(TreeNode* root) 
    {
        vector<int>ans;
        helper(root,ans);
       return ans;
    }
};
using iterative method
----------------------
class Solution {
public:
    vector<int> preorderTraversal(TreeNode* root) 
    {
      vector<int>ans;
      if(root == NULL) return ans;
      stack<TreeNode*> st;
      st.push(root);
      while(st.size())
      {
        root = st.top();
        st.pop();
        ans.push_back(root->val);
        if(root ->right != NULL) st.push(root->right);
        if(root->left != NULL) st.push(root->left);
        
      }
      return ans;
    }
};
